import java.io.IOException;
import java.io.PrintStream;
import java.net.InetAddress;
import org.xbill.DNS.DClass;
import org.xbill.DNS.Header;
import org.xbill.DNS.Message;
import org.xbill.DNS.Name;
import org.xbill.DNS.Record;
import org.xbill.DNS.ReverseMap;
import org.xbill.DNS.SimpleResolver;
import org.xbill.DNS.TSIG;
import org.xbill.DNS.Type;

public class dig
{
  private static int dclass = 1;
  private static Name name;
  private static int type = 1;
  
  public dig() {}
  
  private static void a(Message paramMessage)
    throws IOException
  {
    Object localObject = System.out;
    StringBuffer localStringBuffer = new StringBuffer("; java dig 0.0 <> ");
    localStringBuffer.append(name);
    localStringBuffer.append(" axfr");
    ((PrintStream)localObject).println(localStringBuffer.toString());
    if (paramMessage.isSigned())
    {
      System.out.print(";; TSIG ");
      if (paramMessage.isVerified()) {
        System.out.println("ok");
      } else {
        System.out.println("failed");
      }
    }
    if (paramMessage.getRcode() != 0)
    {
      System.out.println(paramMessage);
      return;
    }
    localObject = paramMessage.getSectionArray(1);
    int i = 0;
    while (i < localObject.length)
    {
      System.out.println(localObject[i]);
      i += 1;
    }
    System.out.print(";; done (");
    System.out.print(paramMessage.getHeader().getCount(1));
    System.out.print(" records, ");
    System.out.print(paramMessage.getHeader().getCount(3));
    System.out.println(" additional)");
  }
  
  private static void cFx()
  {
    System.out.println("Usage: dig [@server] name [<type>] [<class>] [options]");
    System.exit(0);
  }
  
  public static void main(String[] paramArrayOfString)
    throws IOException
  {
    if (paramArrayOfString.length <= 0) {
      cFx();
    }
    try
    {
      if (!paramArrayOfString[0].startsWith("@")) {
        break label756;
      }
      localObject1 = paramArrayOfString[0].substring(1);
      i = 1;
    }
    catch (ArrayIndexOutOfBoundsException paramArrayOfString)
    {
      for (;;)
      {
        continue;
        Object localObject1 = null;
        int i = 0;
        continue;
        int j = 0;
        continue;
        i = j + 1;
        continue;
        continue;
        j = 1;
        continue;
        i += 1;
        Object localObject2 = paramArrayOfString[i];
        continue;
        i += 1;
        localObject2 = paramArrayOfString[i];
        continue;
        i += 1;
        localObject2 = paramArrayOfString[i];
      }
    }
    if (localObject1 != null) {
      localObject1 = new SimpleResolver((String)localObject1);
    } else {
      localObject1 = new SimpleResolver();
    }
    j = i + 1;
    localObject2 = paramArrayOfString[i];
    for (;;)
    {
      try
      {
        if (((String)localObject2).equals("-x"))
        {
          i = j + 1;
          name = ReverseMap.fromAddress(paramArrayOfString[j]);
          type = 12;
          dclass = 1;
        }
        else
        {
          name = Name.fromString((String)localObject2, Name.root);
          i = Type.value(paramArrayOfString[j]);
          type = i;
          if (i >= 0) {
            break label769;
          }
          type = 1;
          i = j;
          j = DClass.value(paramArrayOfString[i]);
          dclass = j;
          if (j < 0) {
            dclass = 1;
          } else {
            i += 1;
          }
        }
      }
      catch (ArrayIndexOutOfBoundsException paramArrayOfString)
      {
        int k;
        continue;
      }
      localObject2 = localObject1;
      k = j;
      try
      {
        if (paramArrayOfString[i].startsWith("-"))
        {
          localObject2 = localObject1;
          k = j;
          if (paramArrayOfString[i].length() > 1) {
            switch (paramArrayOfString[i].charAt(1))
            {
            case 't': 
              localObject2 = System.out;
              continue;
              ((SimpleResolver)localObject1).setTCP(true);
              break;
            case 'p': 
              if (paramArrayOfString[i].length() <= 2) {
                break label784;
              }
              localObject2 = paramArrayOfString[i].substring(2);
              k = Integer.parseInt((String)localObject2);
              if ((k >= 0) && (k <= 65536))
              {
                ((SimpleResolver)localObject1).setPort(k);
              }
              else
              {
                System.out.println("Invalid port");
                return;
              }
              break;
            case 'k': 
              if (paramArrayOfString[i].length() <= 2) {
                break label796;
              }
              localObject2 = paramArrayOfString[i].substring(2);
              ((SimpleResolver)localObject1).setTSIGKey(TSIG.fromString((String)localObject2));
              break;
            case 'i': 
              ((SimpleResolver)localObject1).setIgnoreTruncation(true);
              break;
            case 'e': 
              if (paramArrayOfString[i].length() <= 2) {
                break label808;
              }
              localObject2 = paramArrayOfString[i].substring(2);
              k = Integer.parseInt((String)localObject2);
              if ((k >= 0) && (k <= 1))
              {
                ((SimpleResolver)localObject1).setEDNS(k);
              }
              else
              {
                paramArrayOfString = System.out;
                localObject2 = new StringBuffer("Unsupported EDNS level: ");
                ((StringBuffer)localObject2).append(k);
                paramArrayOfString.println(((StringBuffer)localObject2).toString());
                return;
              }
              break;
            case 'd': 
              ((SimpleResolver)localObject1).setEDNS(0, 0, 32768, null);
              break;
            case 'b': 
              if (paramArrayOfString[i].length() > 2)
              {
                localObject2 = paramArrayOfString[i].substring(2);
              }
              else
              {
                i += 1;
                localObject2 = paramArrayOfString[i];
              }
              break;
            }
          }
        }
      }
      catch (ArrayIndexOutOfBoundsException paramArrayOfString)
      {
        long l1;
        long l2;
        continue;
      }
      try
      {
        localObject2 = InetAddress.getByName((String)localObject2);
        ((SimpleResolver)localObject1).setLocalAddress((InetAddress)localObject2);
      }
      catch (Exception paramArrayOfString)
      {
        continue;
      }
      System.out.println("Invalid address");
      return;
      ((PrintStream)localObject2).print("Invalid option: ");
      System.out.println(paramArrayOfString[i]);
      i += 1;
    }
    localObject1 = null;
    j = 0;
    localObject2 = localObject1;
    k = j;
    if (name == null)
    {
      cFx();
      k = j;
      localObject2 = localObject1;
    }
    paramArrayOfString = (String[])localObject2;
    if (localObject2 == null) {
      paramArrayOfString = new SimpleResolver();
    }
    localObject1 = Message.newQuery(Record.newRecord(name, type, dclass));
    if (k != 0) {
      System.out.println(localObject1);
    }
    l1 = System.currentTimeMillis();
    paramArrayOfString = paramArrayOfString.send((Message)localObject1);
    l2 = System.currentTimeMillis();
    if (type == 252)
    {
      a(paramArrayOfString);
      return;
    }
    System.out.println("; java dig 0.0");
    System.out.println(paramArrayOfString);
    paramArrayOfString = System.out;
    localObject1 = new StringBuffer(";; Query time: ");
    ((StringBuffer)localObject1).append(l2 - l1);
    ((StringBuffer)localObject1).append(" ms");
    paramArrayOfString.println(((StringBuffer)localObject1).toString());
  }
}
