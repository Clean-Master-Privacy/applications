package android.arch.a.b;

import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import java.util.WeakHashMap;

public class b<K, V>
  implements Iterable<Map.Entry<K, V>>
{
  public c<K, V> ab;
  public c<K, V> ac;
  public WeakHashMap<f<K, V>, Boolean> ae = new WeakHashMap();
  public int mSize = 0;
  
  public b() {}
  
  public final b<K, V>.d J()
  {
    d localD = new d((byte)0);
    ae.put(localD, Boolean.valueOf(false));
    return localD;
  }
  
  protected c<K, V> b(K paramK)
  {
    for (c localC = ab; (localC != null) && (!af.equals(paramK)); localC = ag) {}
    return localC;
  }
  
  protected final c<K, V> b(K paramK, V paramV)
  {
    paramK = new c(paramK, paramV);
    mSize += 1;
    if (ac == null)
    {
      ab = paramK;
      ac = ab;
      return paramK;
    }
    ac.ag = paramK;
    ah = ac;
    ac = paramK;
    return paramK;
  }
  
  public boolean equals(Object paramObject)
  {
    if (paramObject == this) {
      return true;
    }
    if (!(paramObject instanceof b)) {
      return false;
    }
    Object localObject1 = (b)paramObject;
    if (mSize != mSize) {
      return false;
    }
    paramObject = iterator();
    localObject1 = ((b)localObject1).iterator();
    while ((paramObject.hasNext()) && (((Iterator)localObject1).hasNext()))
    {
      Map.Entry localEntry = (Map.Entry)paramObject.next();
      Object localObject2 = ((Iterator)localObject1).next();
      if (((localEntry == null) && (localObject2 != null)) || ((localEntry != null) && (!localEntry.equals(localObject2)))) {
        return false;
      }
    }
    return (!paramObject.hasNext()) && (!((Iterator)localObject1).hasNext());
  }
  
  public Iterator<Map.Entry<K, V>> iterator()
  {
    a localA = new a(ab, ac);
    ae.put(localA, Boolean.valueOf(false));
    return localA;
  }
  
  public V putIfAbsent(K paramK, V paramV)
  {
    c localC = b(paramK);
    if (localC != null) {
      return mValue;
    }
    b(paramK, paramV);
    return null;
  }
  
  public V remove(K paramK)
  {
    paramK = b(paramK);
    if (paramK == null) {
      return null;
    }
    mSize -= 1;
    if (!ae.isEmpty())
    {
      Iterator localIterator = ae.keySet().iterator();
      while (localIterator.hasNext()) {
        ((f)localIterator.next()).c(paramK);
      }
    }
    if (ah != null) {
      ah.ag = ag;
    } else {
      ab = ag;
    }
    if (ag != null) {
      ag.ah = ah;
    } else {
      ac = ah;
    }
    ag = null;
    ah = null;
    return mValue;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("[");
    Iterator localIterator = iterator();
    while (localIterator.hasNext())
    {
      localStringBuilder.append(((Map.Entry)localIterator.next()).toString());
      if (localIterator.hasNext()) {
        localStringBuilder.append(", ");
      }
    }
    localStringBuilder.append("]");
    return localStringBuilder.toString();
  }
  
  static final class a<K, V>
    extends b.e<K, V>
  {
    a(b.c<K, V> paramC1, b.c<K, V> paramC2)
    {
      super(paramC2);
    }
    
    final b.c<K, V> a(b.c<K, V> paramC)
    {
      return ag;
    }
    
    final b.c<K, V> b(b.c<K, V> paramC)
    {
      return ah;
    }
  }
  
  private static final class b<K, V>
    extends b.e<K, V>
  {
    public b(b.c<K, V> paramC1, b.c<K, V> paramC2)
    {
      super(paramC2);
    }
    
    final b.c<K, V> a(b.c<K, V> paramC)
    {
      return ah;
    }
    
    final b.c<K, V> b(b.c<K, V> paramC)
    {
      return ag;
    }
  }
  
  public static final class c<K, V>
    implements Map.Entry<K, V>
  {
    final K af;
    c<K, V> ag;
    public c<K, V> ah;
    final V mValue;
    
    c(K paramK, V paramV)
    {
      af = paramK;
      mValue = paramV;
    }
    
    public final boolean equals(Object paramObject)
    {
      if (paramObject == this) {
        return true;
      }
      if (!(paramObject instanceof c)) {
        return false;
      }
      paramObject = (c)paramObject;
      return (af.equals(af)) && (mValue.equals(mValue));
    }
    
    public final K getKey()
    {
      return af;
    }
    
    public final V getValue()
    {
      return mValue;
    }
    
    public final V setValue(V paramV)
    {
      throw new UnsupportedOperationException("An entry modification is not supported");
    }
    
    public final String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(af);
      localStringBuilder.append("=");
      localStringBuilder.append(mValue);
      return localStringBuilder.toString();
    }
  }
  
  private final class d
    implements b.f<K, V>, Iterator<Map.Entry<K, V>>
  {
    private b.c<K, V> ai;
    private boolean aj = true;
    
    private d() {}
    
    public final void c(b.c<K, V> paramC)
    {
      if (paramC == ai)
      {
        ai = ai.ah;
        boolean bool;
        if (ai == null) {
          bool = true;
        } else {
          bool = false;
        }
        aj = bool;
      }
    }
    
    public final boolean hasNext()
    {
      if (aj) {
        return b.a(b.this) != null;
      }
      return (ai != null) && (ai.ag != null);
    }
  }
  
  private static abstract class e<K, V>
    implements b.f<K, V>, Iterator<Map.Entry<K, V>>
  {
    private b.c<K, V> ag;
    private b.c<K, V> al;
    
    e(b.c<K, V> paramC1, b.c<K, V> paramC2)
    {
      al = paramC2;
      ag = paramC1;
    }
    
    private b.c<K, V> K()
    {
      if ((ag != al) && (al != null)) {
        return a(ag);
      }
      return null;
    }
    
    abstract b.c<K, V> a(b.c<K, V> paramC);
    
    abstract b.c<K, V> b(b.c<K, V> paramC);
    
    public final void c(b.c<K, V> paramC)
    {
      if ((al == paramC) && (paramC == ag))
      {
        ag = null;
        al = null;
      }
      if (al == paramC) {
        al = b(al);
      }
      if (ag == paramC) {
        ag = K();
      }
    }
    
    public boolean hasNext()
    {
      return ag != null;
    }
  }
  
  static abstract interface f<K, V>
  {
    public abstract void c(b.c<K, V> paramC);
  }
}
