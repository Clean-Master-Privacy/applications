name: Dependabot CI

on:
  schedule:
    - cron: '0 * * * *'  # Her saat başı çalışır
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  dependency_management:
    runs-on: ubuntu-latest
    steps:
      - name: Klonla
        uses: actions/checkout@v2

      - name: Gerekli Araçları Kur
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ cmake # C++ için gerekli araçlar

      - name: Projeleri Bul
        id: find-projects
        run: |
          echo "Proje dizinleri:"
          for dir in $(find . -type d -name "nodejs-app" -o -name "python-app" -o -name "ruby-app" -o -name "php-app" -o -name "java-app" -o -name "go-app" -o -name "dotnet-app" -o -name "cpp-app" -o -name "swift-app" -o -name "rust-app" -o -name "typescript-app" -o -name "elixir-app" -o -name "scala-app"); do
            echo "Bulunan proje: $dir"
            echo "$dir" >> projects.txt
          done
          cat projects.txt

      - name: Node.js Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              if [ -f package.json ]; then
                npm install
                npm update
                npm audit fix
                npx eslint . --fix || true
              fi
              cd -
            fi
          done < projects.txt

      - name: Python Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              if [ -f requirements.txt ]; then
                pip install -r requirements.txt
                pip install --upgrade -r requirements.txt
                pip install safety black flake8
                safety check
                black . || true
                flake8 . || true
              fi
              cd -
            fi
          done < projects.txt

      - name: Ruby Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              if [ -f Gemfile ]; then
                bundle install
                bundle update
                bundler-audit check
                rubocop -A || true
              fi
              cd -
            fi
          done < projects.txt

      - name: PHP Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              if [ -f composer.json ]; then
                composer install
                composer update
                composer audit
                php-cs-fixer fix || true
              fi
              cd -
            fi
          done < projects.txt

      - name: Java Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              if [ -f pom.xml ]; then
                mvn install
                mvn versions:use-latest-releases
                mvn checkstyle:check || true
                mvn spotless:apply || true
              fi
              cd -
            fi
          done < projects.txt

      - name: Go Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              if [ -f go.mod ]; then
                go mod tidy
                go vet ./... || true
                gofmt -w . 
              fi
              cd -
            fi
          done < projects.txt

      - name: C# Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              if [ -f *.csproj ]; then
                dotnet restore
                dotnet outdated
                dotnet tool install -g dotnet-format
                dotnet format --check || true
                dotnet build
              fi
              cd -
            fi
          done < projects.txt

      - name: C++ Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              mkdir -p build
              cd build
              cmake ..
              make
              cppcheck .. 
              cd -
            fi
          done < projects.txt

      - name: Swift Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              if [ -f Package.swift ]; then
                swift package resolve
                swift test
                swiftformat . 
              fi
              cd -
            fi
          done < projects.txt

      - name: Rust Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              if [ -f Cargo.toml ]; then
                cargo update
                cargo fmt --all -- --check || true 
                cargo clippy -- -D warnings || true
              fi
              cd -
            fi
          done < projects.txt

      - name: TypeScript Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              if [ -f package.json ]; then
                npm install
                npm update
                npm audit fix
                npx eslint . --fix || true
              fi
              cd -
            fi
          done < projects.txt

      - name: Elixir Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              if [ -f mix.exs ]; then
                mix deps.get
                mix deps.update --all
                mix format || true
              fi
              cd -
            fi
          done < projects.txt

      - name: Scala Bağımlılık Yönetimi
        run: |
          while IFS= read -r line; do
            if [[ -d "$line" ]]; then
              cd "$line" || exit
              if [ -f build.sbt ]; then
                sbt update
                sbt scalafmt || true
              fi
              cd -
            fi
          done < projects.txt

      - name: Commit Değişiklikleri
        run: |
          git config --local user.email "gamestime102@users.noreply.github.com"  # Git kullanıcı e-posta adresiniz
          git config --local user.name "gamestime102"  # Git kullanıcı adınız
          git add .  # Güncellenen dosyaları ekle
          git commit -m "Chore: Update dependencies and format code" || echo "No changes to commit"
          git push origin main  # Değişiklikleri ana branch'e ilet

      - name: Kapatma
        run: echo "BAŞARIYLA KAPATILDI"
