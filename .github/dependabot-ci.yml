name: Dependabot CI

on:
  schedule:
    - cron: '0 * * * *'  # Her saat başı çalışır
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  dependency_management:
    runs-on: ubuntu-latest
    steps:
      - name: Klonla
        uses: actions/checkout@v2

      - name: Node.js Bağımlılık Yönetimi
        run: |
          cd nodejs-app
          npm install
          npm update
          npm audit fix  # Güvenlik açıklarını düzeltir
          npx eslint . --fix || true # Kod hatalarını düzeltir ve ses tonunu korur

      - name: Python Bağımlılık Yönetimi
        run: |
          cd python-app
          pip install -r requirements.txt
          pip install --upgrade -r requirements.txt
          pip install safety black flake8
          safety check  # Zararlı bağımlılık kontrolü
          black . || true  # Kod formatlama
          flake8 . || true  # Kod hatalarını kontrol et

      - name: Ruby Bağımlılık Yönetimi
        run: |
          cd ruby-app
          bundle install
          bundle update
          bundler-audit check  # Güvenlik kontrolü
          rubocop -A || true  # Kod hatalarını analiz et ve düzelt

      - name: PHP Bağımlılık Yönetimi
        run: |
          cd php-app
          composer install
          composer update
          composer audit  # Güvenlik kontrolü
          php-cs-fixer fix || true  # Kod formatlama

      - name: Java Bağımlılık Yönetimi
        run: |
          cd java-app
          mvn install
          mvn versions:use-latest-releases
          mvn checkstyle:check || true  # Kod standartlarını kontrol et
          mvn spotless:apply || true  # Düzensizlikleri gider

      - name: Go Bağımlılık Yönetimi
        run: |
          cd go-app
          go mod tidy
          go vet ./... || true  # Kod kontrolü ve düzeltme
          gofmt -w .  # Kod formatlama

      - name: C# Bağımlılık Yönetimi
        run: |
          cd dotnet-app
          dotnet restore
          dotnet outdated
          dotnet tool install -g dotnet-format
          dotnet format --check || true  # Kod formatlama
          dotnet build  # Projeyi derle

      - name: C++ Bağımlılık Yönetimi
        run: |
          cd cpp-app
          mkdir -p build && cd build
          cmake ..
          make  # Derleme işlemi
          cppcheck ..  # Kod kontrolü

      - name: Swift Bağımlılık Yönetimi
        run: |
          cd swift-app
          swift package resolve  # Bağımlılıkları çöz
          swift test  # Testleri çalıştır
          swiftformat .  # Kod formatlama

      - name: Rust Bağımlılık Yönetimi
        run: |
          cd rust-app
          cargo update  # Bağımlılıkları güncelle
          cargo fmt --all -- --check || true  # Kod formatlama
          cargo clippy -- -D warnings || true  # Kod hatalarını kontrol et

      - name: Commit Değişiklikleri
        run: |
          git config --local user.email "your_email@example.com"  # Git kullanıcı e-posta adresiniz
          git config --local user.name "Your Name"  # Git kullanıcı adınız
          git add .  # Güncellenen dosyaları ekle
          git commit -m "Chore: Update dependencies and format code" || echo "No changes to commit"
          git push origin main  # Değişiklikleri ana branch'e ilet

      - name: Kapatma
        run: echo "BAŞARIYLA KAPATILDI"
